# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ACmMqpANSIlG1uP9IH5V7EblAmMu3-KO
"""

p=input('Enter the number of tables:')
for i in range(1,11):
  m=int(p)*i
  print(p,"x",i,"=",m)

class hello:
  def __init__(self,name):
    self.a = 10
    self._b = 20
    self.__c = 30

  def set_value(self,value):
    self.__c = value
  
  def get_value(self):
    return self.__c
    
    
r = hello('Adriana')
r.set_value(60)
print(r.get_value())

r.a =50
print(r.a)

r._b =100
print(r._b)

r.__c = 300
print(r.__c)

class French:
  def say_hello(self):
    print("Bojour")

class Hindi:
  def say_hello(self):
    print("Namaste")
  
def intro(lang):
  lang.say_hello()

John = French()
Ravi = Hindi()

intro(Ravi)
intro(John)

class Base:

  def __init__(self):
    self.a = "Ravi"
    self.__c = "Ravi"

class Derived(Base):

  def __init__(self):
    Base.__init__(self)
    print("Calling private memeber of base class")
    print(self.__c)

obj1 = Base()
print(obj1.a)
print(obj1.__c)



obj2 = Derived()

a = input("Enter the limit: ")
l=[0,1]
w=0
for i in range(2,int(a)):
  w=l[i-1]+l[i-2]
  l.append(w)
print(l)

class fibonacci:
  def __init__(self,a):
    self.a = a

  def calculate(self):
    w=0
    l=[0,1]
    for i in range(2,int(self.a)):
      w = l[i-1] + l[i-2]
      l.append(w)
    print("The fibonacci series is ",l)

oj=fibonacci(13)
oj.calculate()

[python definition, 
 python datatypes,
 python functions,
 creating a user defined function,
 python loop syntaxes like if, elif, for etc,
 object oriented programming,
 polymorphism,
 inheritance,
 creating a class,
 accessing a class,
 init method]

n=input("Enter the List:")
numbers=[]
for j in n:
  numbers.append(j)
squares=[]
for i in numbers:
  s = i*i
  squares.append(s)
print(numbers)
print(squares)

import time
start_time = time.time()
numbers = list(range(10000))
squared_numbers2 = []
squared_numbers2 = map(square, numbers)

end_time = time.time()
time_elapsed = (end_time - start_time)
print(time_elapsed)

list1 = [2,7,4,8]
list2 = [3,1,7,11]
list_combined = []
for i in range(len(list1)):
  x=(list1[i],list2[i])
  list_combined.append(x)
print(list_combined)

list1 = [2,7,4,8]
list2 = [3,1,7,11]
zipped_result = zip(list1,list2)
list(zipped_result)

[x**3 for x in range(15) if x%2==1]

[x**3 for x in range(15) if x%2==0]

list(range(15))

a = [x**3 for x in range(15)]
print(a)
print(len(a))

import random

random_list=[]
for j in range(15):
  a =int(random.randint(0,20))
  random_list.append(a)
o = [i**2 for i in random_list if i<10]
print(o)

def fun(a):
  if a<4:
     b = a/(a-3)
     print(f"The value of b is {b}")
fun(5)

try:
  #fun(3)
  fun(5)
except ZeroDivisionError:
  print('ZeroDivisionError occurred and handled')
except NameError:
  print("NameError occurred and Handled")

def AbyB(a,b):
  try:
    c = ((a+b)/(a-b))
  except ZeroDivisionError:
    print('Division by 0 error')
  else:
    print(c)



AbyB(2,3)
AbyB(3,3)
AbyB(7,5)

try:
  f = open("geek.txt")
except IOError as e:
  print('First')
except Exception as e:
  print('Second')
else:
  print(f.read())
  f.close
finally:
  print('Executing Finally..')

print('End Of Program')

file = open('geek.txt','a')
file.write("\n This will add this line")
file.write("\nThis is the second line")
file.close()
file = open("geek.txt",'r')
print(file.read())

class Base:
  def __init__(self): 
    self.a = "GeekForGeeks"
    self.__c = "GeeksForGeeks"

class Derived(Base):
  def __init__ (self):

    Base.__init__(self)
    print("Calling private memeber of base class")
    print(self.__c)

obj1 = Base()
print(obj1.a)
#print(obj1.__c)



obj2 = Derived()
print(obj2.a)
print(obj2.__c)

import numpy as np
arr = np.array([1,2,3,4,5])

print(arr)

arr1 = np.array([[1,2,3],[4,5,6]])

print(arr1)

arr2 = np.array([[1,2,7],[3,4,8],[5,6,9]])

print(arr2)

arr[0]  + arr[2]

arr = np.array([2,2,3,4,5,2,2])

x = np.where(arr==2)
print(x)

arr1 = np.array ([1,2,3,4,5,6,7])
arr2 = np.array([7,8,9,10,11,12])
print(np.log2(arr1))
print(np.log10(arr1))

